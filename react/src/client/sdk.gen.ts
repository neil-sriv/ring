// This file is auto-generated by @hey-api/openapi-ts

import { type Options, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-axios';
import type { LoginAccessTokenLoginAccessTokenPostData, LoginAccessTokenLoginAccessTokenPostResponse, LoginAccessTokenLoginAccessTokenPostError, TestTokenLoginTestTokenPostData, TestTokenLoginTestTokenPostResponse, ResetPasswordRequestResetPasswordRequestEmailPostData, ResetPasswordRequestResetPasswordRequestEmailPostResponse, ResetPasswordRequestResetPasswordRequestEmailPostError, ResetPasswordResetPasswordTokenPostData, ResetPasswordResetPasswordTokenPostResponse, ResetPasswordResetPasswordTokenPostError, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponse, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostError, DeleteUserMePartiesMeDeleteData, DeleteUserMePartiesMeDeleteResponse, ReadUserMePartiesMeGetData, ReadUserMePartiesMeGetResponse, UpdateUserMePartiesMePatchData, UpdateUserMePartiesMePatchResponse, UpdateUserMePartiesMePatchError, CreateUserPartiesUserPostData, CreateUserPartiesUserPostResponse, CreateUserPartiesUserPostError, RegisterUserPartiesRegisterTokenPostData, RegisterUserPartiesRegisterTokenPostResponse, RegisterUserPartiesRegisterTokenPostError, ReadUsersPartiesUsersGetData, ReadUsersPartiesUsersGetResponse, ReadUsersPartiesUsersGetError, ReadUserByIdPartiesUserUserApiIdGetData, ReadUserByIdPartiesUserUserApiIdGetResponse, ReadUserByIdPartiesUserUserApiIdGetError, UpdatePasswordMePartiesMePasswordPatchData, UpdatePasswordMePartiesMePasswordPatchResponse, UpdatePasswordMePartiesMePasswordPatchError, SignupPartiesSignupPostData, SignupPartiesSignupPostResponse, DeleteUserPartiesUserIdDeleteData, DeleteUserPartiesUserIdDeleteResponse, UpdateUserPartiesUserIdPatchData, UpdateUserPartiesUserIdPatchResponse, CreateGroupPartiesGroupPostData, CreateGroupPartiesGroupPostResponse, CreateGroupPartiesGroupPostError, ListGroupsPartiesGroupsGetData, ListGroupsPartiesGroupsGetResponse, ListGroupsPartiesGroupsGetError, ReadGroupPartiesGroupGroupApiIdGetData, ReadGroupPartiesGroupGroupApiIdGetResponse, ReadGroupPartiesGroupGroupApiIdGetError, UpdateGroupPartiesGroupGroupApiIdPatchData, UpdateGroupPartiesGroupGroupApiIdPatchResponse, UpdateGroupPartiesGroupGroupApiIdPatchError, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponse, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostError, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponse, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostError, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponse, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostError, AddMembersPartiesGroupGroupApiIdAddMembersPostData, AddMembersPartiesGroupGroupApiIdAddMembersPostResponse, AddMembersPartiesGroupGroupApiIdAddMembersPostError, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponse, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostError, AddNextLetterLettersLetterPostData, AddNextLetterLettersLetterPostResponse, AddNextLetterLettersLetterPostError, ListLettersLettersLettersGetData, ListLettersLettersLettersGetResponse, ListLettersLettersLettersGetError, ReadLetterLettersLetterLetterApiIdGetData, ReadLetterLettersLetterLetterApiIdGetResponse, ReadLetterLettersLetterLetterApiIdGetError, ListDashboardLettersLettersLettersDashboardGetData, ListDashboardLettersLettersLettersDashboardGetResponse, EditLetterLettersLetterLetterApiIdEditLetterPostData, EditLetterLettersLetterLetterApiIdEditLetterPostResponse, EditLetterLettersLetterLetterApiIdEditLetterPostError, AddQuestionLettersLetterLetterApiIdAddQuestionPostData, AddQuestionLettersLetterLetterApiIdAddQuestionPostResponse, AddQuestionLettersLetterLetterApiIdAddQuestionPostError, BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchData, BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchResponse, BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchError, GetScheduleForGroupScheduleScheduleGroupApiIdGetData, GetScheduleForGroupScheduleScheduleGroupApiIdGetResponse, GetScheduleForGroupScheduleScheduleGroupApiIdGetError, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponse, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostError, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponse, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostError, EditResponseResponsesResponseResponseApiIdEditResponsePostData, EditResponseResponsesResponseResponseApiIdEditResponsePostResponse, EditResponseResponsesResponseResponseApiIdEditResponsePostError, UploadImageResponsesResponseResponseApiIdUploadImagePostData, UploadImageResponsesResponseResponseApiIdUploadImagePostResponse, UploadImageResponsesResponseResponseApiIdUploadImagePostError, CreateInviteInvitesPostData, CreateInviteInvitesPostResponse, CreateInviteInvitesPostError, ValidateTokenInvitesTokenTokenGetData, ValidateTokenInvitesTokenTokenGetResponse, ValidateTokenInvitesTokenTokenGetError, RootGetData, HelloHelloGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Login Access Token
 */
export const loginAccessTokenLoginAccessTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenLoginAccessTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginAccessTokenLoginAccessTokenPostResponse, LoginAccessTokenLoginAccessTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Test Token
 * Test access token
 */
export const testTokenLoginTestTokenPost = <ThrowOnError extends boolean = false>(options?: Options<TestTokenLoginTestTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TestTokenLoginTestTokenPostResponse, unknown, ThrowOnError>({
        url: '/login/test-token',
        ...options
    });
};

/**
 * Reset Password Request
 * Password Reset Request
 */
export const resetPasswordRequestResetPasswordRequestEmailPost = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordRequestResetPasswordRequestEmailPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ResetPasswordRequestResetPasswordRequestEmailPostResponse, ResetPasswordRequestResetPasswordRequestEmailPostError, ThrowOnError>({
        url: '/reset-password:request/{email}',
        ...options
    });
};

/**
 * Reset Password
 * Reset password
 */
export const resetPasswordResetPasswordTokenPost = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordResetPasswordTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ResetPasswordResetPasswordTokenPostResponse, ResetPasswordResetPasswordTokenPostError, ThrowOnError>({
        url: '/reset-password/{token}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPost = <ThrowOnError extends boolean = false>(options: Options<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponse, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostError, ThrowOnError>({
        url: '/password-recovery-html-content/{email}',
        ...options
    });
};

/**
 * @deprecated
 * Delete User Me
 * Delete own user.
 */
export const deleteUserMePartiesMeDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserMePartiesMeDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserMePartiesMeDeleteResponse, unknown, ThrowOnError>({
        url: '/parties/me',
        ...options
    });
};

/**
 * Read User Me
 */
export const readUserMePartiesMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUserMePartiesMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUserMePartiesMeGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/me',
        ...options
    });
};

/**
 * Update User Me
 * Update own user.
 */
export const updateUserMePartiesMePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserMePartiesMePatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateUserMePartiesMePatchResponse, UpdateUserMePartiesMePatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Create User
 */
export const createUserPartiesUserPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserPartiesUserPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserPartiesUserPostResponse, CreateUserPartiesUserPostError, ThrowOnError>({
        url: '/parties/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register User
 */
export const registerUserPartiesRegisterTokenPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserPartiesRegisterTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegisterUserPartiesRegisterTokenPostResponse, RegisterUserPartiesRegisterTokenPostError, ThrowOnError>({
        url: '/parties/register/{token}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Users
 */
export const readUsersPartiesUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersPartiesUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUsersPartiesUsersGetResponse, ReadUsersPartiesUsersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/users',
        ...options
    });
};

/**
 * Read User By Id
 */
export const readUserByIdPartiesUserUserApiIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUserByIdPartiesUserUserApiIdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUserByIdPartiesUserUserApiIdGetResponse, ReadUserByIdPartiesUserUserApiIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/user/{user_api_id}',
        ...options
    });
};

/**
 * Update Password Me
 * Update own password.
 */
export const updatePasswordMePartiesMePasswordPatch = <ThrowOnError extends boolean = false>(options: Options<UpdatePasswordMePartiesMePasswordPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdatePasswordMePartiesMePasswordPatchResponse, UpdatePasswordMePartiesMePasswordPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/me/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Signup
 * Create new user without the need to be logged in.
 */
export const signupPartiesSignupPost = <ThrowOnError extends boolean = false>(options?: Options<SignupPartiesSignupPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SignupPartiesSignupPostResponse, unknown, ThrowOnError>({
        url: '/parties/signup',
        ...options
    });
};

/**
 * @deprecated
 * Delete User
 * Delete a user.
 */
export const deleteUserPartiesUserIdDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserPartiesUserIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserPartiesUserIdDeleteResponse, unknown, ThrowOnError>({
        url: '/parties/{user_id}',
        ...options
    });
};

/**
 * @deprecated
 * Update User
 * Update a user.
 */
export const updateUserPartiesUserIdPatch = <ThrowOnError extends boolean = false>(options?: Options<UpdateUserPartiesUserIdPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateUserPartiesUserIdPatchResponse, unknown, ThrowOnError>({
        url: '/parties/{user_id}',
        ...options
    });
};

/**
 * Create Group
 */
export const createGroupPartiesGroupPost = <ThrowOnError extends boolean = false>(options: Options<CreateGroupPartiesGroupPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateGroupPartiesGroupPostResponse, CreateGroupPartiesGroupPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Groups
 */
export const listGroupsPartiesGroupsGet = <ThrowOnError extends boolean = false>(options: Options<ListGroupsPartiesGroupsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGroupsPartiesGroupsGetResponse, ListGroupsPartiesGroupsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/groups/',
        ...options
    });
};

/**
 * Read Group
 */
export const readGroupPartiesGroupGroupApiIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadGroupPartiesGroupGroupApiIdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadGroupPartiesGroupGroupApiIdGetResponse, ReadGroupPartiesGroupGroupApiIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}',
        ...options
    });
};

/**
 * Update Group
 */
export const updateGroupPartiesGroupGroupApiIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupPartiesGroupGroupApiIdPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateGroupPartiesGroupGroupApiIdPatchResponse, UpdateGroupPartiesGroupGroupApiIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add User To Group
 */
export const addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPost = <ThrowOnError extends boolean = false>(options: Options<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponse, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}:add_member/{user_api_id}',
        ...options
    });
};

/**
 * Remove User From Group
 */
export const removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPost = <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponse, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}:remove_member/{user_api_id}',
        ...options
    });
};

/**
 * Schedule Send
 */
export const scheduleSendPartiesGroupGroupApiIdScheduleSendPost = <ThrowOnError extends boolean = false>(options: Options<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponse, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}:schedule_send',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Members
 */
export const addMembersPartiesGroupGroupApiIdAddMembersPost = <ThrowOnError extends boolean = false>(options: Options<AddMembersPartiesGroupGroupApiIdAddMembersPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddMembersPartiesGroupGroupApiIdAddMembersPostResponse, AddMembersPartiesGroupGroupApiIdAddMembersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}:add_members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Replace Group Default Questions
 */
export const replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPost = <ThrowOnError extends boolean = false>(options: Options<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponse, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/parties/group/{group_api_id}:replace_default_questions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Next Letter
 */
export const addNextLetterLettersLetterPost = <ThrowOnError extends boolean = false>(options: Options<AddNextLetterLettersLetterPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddNextLetterLettersLetterPostResponse, AddNextLetterLettersLetterPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letter',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Letters
 */
export const listLettersLettersLettersGet = <ThrowOnError extends boolean = false>(options: Options<ListLettersLettersLettersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLettersLettersLettersGetResponse, ListLettersLettersLettersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letters/',
        ...options
    });
};

/**
 * Read Letter
 */
export const readLetterLettersLetterLetterApiIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadLetterLettersLetterLetterApiIdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadLetterLettersLetterLetterApiIdGetResponse, ReadLetterLettersLetterLetterApiIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letter/{letter_api_id}',
        ...options
    });
};

/**
 * List Dashboard Letters
 */
export const listDashboardLettersLettersLettersDashboardGet = <ThrowOnError extends boolean = false>(options?: Options<ListDashboardLettersLettersLettersDashboardGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDashboardLettersLettersLettersDashboardGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letters:dashboard',
        ...options
    });
};

/**
 * Edit Letter
 */
export const editLetterLettersLetterLetterApiIdEditLetterPost = <ThrowOnError extends boolean = false>(options: Options<EditLetterLettersLetterLetterApiIdEditLetterPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EditLetterLettersLetterLetterApiIdEditLetterPostResponse, EditLetterLettersLetterLetterApiIdEditLetterPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letter/{letter_api_id}:edit_letter',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Question
 */
export const addQuestionLettersLetterLetterApiIdAddQuestionPost = <ThrowOnError extends boolean = false>(options: Options<AddQuestionLettersLetterLetterApiIdAddQuestionPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddQuestionLettersLetterLetterApiIdAddQuestionPostResponse, AddQuestionLettersLetterLetterApiIdAddQuestionPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letter/{letter_api_id}:add_question',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Bulk Edit Responses
 */
export const bulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatch = <ThrowOnError extends boolean = false>(options: Options<BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchResponse, BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letters/letter/{letter_api_id}:bulk_edit_responses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Schedule For Group
 */
export const getScheduleForGroupScheduleScheduleGroupApiIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScheduleForGroupScheduleScheduleGroupApiIdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScheduleForGroupScheduleScheduleGroupApiIdGetResponse, GetScheduleForGroupScheduleScheduleGroupApiIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/schedule/schedule/{group_api_id}',
        ...options
    });
};

/**
 * Upsert Response
 */
export const upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePost = <ThrowOnError extends boolean = false>(options: Options<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponse, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/questions/question/{question_api_id}:upsert_response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Image
 */
export const uploadImageQuestionsQuestionQuestionApiIdUploadImagePost = <ThrowOnError extends boolean = false>(options: Options<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponse, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/questions/question/{question_api_id}:upload_image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Edit Response
 */
export const editResponseResponsesResponseResponseApiIdEditResponsePost = <ThrowOnError extends boolean = false>(options: Options<EditResponseResponsesResponseResponseApiIdEditResponsePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EditResponseResponsesResponseResponseApiIdEditResponsePostResponse, EditResponseResponsesResponseResponseApiIdEditResponsePostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responses/response/{response_api_id}:edit_response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Upload Image
 */
export const uploadImageResponsesResponseResponseApiIdUploadImagePost = <ThrowOnError extends boolean = false>(options: Options<UploadImageResponsesResponseResponseApiIdUploadImagePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadImageResponsesResponseResponseApiIdUploadImagePostResponse, UploadImageResponsesResponseResponseApiIdUploadImagePostError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responses/response/{response_api_id}:upload_image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Create Invite
 */
export const createInviteInvitesPost = <ThrowOnError extends boolean = false>(options: Options<CreateInviteInvitesPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateInviteInvitesPostResponse, CreateInviteInvitesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/invites/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Validate Token
 */
export const validateTokenInvitesTokenTokenGet = <ThrowOnError extends boolean = false>(options: Options<ValidateTokenInvitesTokenTokenGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ValidateTokenInvitesTokenTokenGetResponse, ValidateTokenInvitesTokenTokenGetError, ThrowOnError>({
        url: '/invites/token/{token}',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Hello
 */
export const helloHelloGet = <ThrowOnError extends boolean = false>(options?: Options<HelloHelloGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/hello',
        ...options
    });
};