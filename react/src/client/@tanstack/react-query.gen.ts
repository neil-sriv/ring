// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { LoginAccessTokenLoginAccessTokenPostData, LoginAccessTokenLoginAccessTokenPostError, LoginAccessTokenLoginAccessTokenPostResponse, TestTokenLoginTestTokenPostData, TestTokenLoginTestTokenPostResponse, ResetPasswordRequestResetPasswordRequestEmailPostData, ResetPasswordRequestResetPasswordRequestEmailPostError, ResetPasswordRequestResetPasswordRequestEmailPostResponse, ResetPasswordResetPasswordTokenPostData, ResetPasswordResetPasswordTokenPostError, ResetPasswordResetPasswordTokenPostResponse, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostError, RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponse, DeleteUserMePartiesMeDeleteData, DeleteUserMePartiesMeDeleteResponse, ReadUserMePartiesMeGetData, UpdateUserMePartiesMePatchData, UpdateUserMePartiesMePatchError, UpdateUserMePartiesMePatchResponse, CreateUserPartiesUserPostData, CreateUserPartiesUserPostError, CreateUserPartiesUserPostResponse, RegisterUserPartiesRegisterTokenPostData, RegisterUserPartiesRegisterTokenPostError, RegisterUserPartiesRegisterTokenPostResponse, ReadUsersPartiesUsersGetData, ReadUserByIdPartiesUserUserApiIdGetData, UpdatePasswordMePartiesMePasswordPatchData, UpdatePasswordMePartiesMePasswordPatchError, UpdatePasswordMePartiesMePasswordPatchResponse, SignupPartiesSignupPostData, SignupPartiesSignupPostResponse, DeleteUserPartiesUserIdDeleteData, DeleteUserPartiesUserIdDeleteResponse, UpdateUserPartiesUserIdPatchData, UpdateUserPartiesUserIdPatchResponse, CreateGroupPartiesGroupPostData, CreateGroupPartiesGroupPostError, CreateGroupPartiesGroupPostResponse, ListGroupsPartiesGroupsGetData, ReadGroupPartiesGroupGroupApiIdGetData, UpdateGroupPartiesGroupGroupApiIdPatchData, UpdateGroupPartiesGroupGroupApiIdPatchError, UpdateGroupPartiesGroupGroupApiIdPatchResponse, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostError, AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponse, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostError, RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponse, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostError, ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponse, AddMembersPartiesGroupGroupApiIdAddMembersPostData, AddMembersPartiesGroupGroupApiIdAddMembersPostError, AddMembersPartiesGroupGroupApiIdAddMembersPostResponse, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostError, ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponse, AddNextLetterLettersLetterPostData, AddNextLetterLettersLetterPostError, AddNextLetterLettersLetterPostResponse, ListLettersLettersLettersGetData, ReadLetterLettersLetterLetterApiIdGetData, ListDashboardLettersLettersLettersDashboardGetData, EditLetterLettersLetterLetterApiIdEditLetterPostData, EditLetterLettersLetterLetterApiIdEditLetterPostError, EditLetterLettersLetterLetterApiIdEditLetterPostResponse, AddQuestionLettersLetterLetterApiIdAddQuestionPostData, AddQuestionLettersLetterLetterApiIdAddQuestionPostError, AddQuestionLettersLetterLetterApiIdAddQuestionPostResponse, GetScheduleForGroupScheduleScheduleGroupApiIdGetData, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostError, UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponse, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostError, UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponse, EditResponseResponsesResponseResponseApiIdEditResponsePostData, EditResponseResponsesResponseResponseApiIdEditResponsePostError, EditResponseResponsesResponseResponseApiIdEditResponsePostResponse, UploadImageResponsesResponseResponseApiIdUploadImagePostData, UploadImageResponsesResponseResponseApiIdUploadImagePostError, UploadImageResponsesResponseResponseApiIdUploadImagePostResponse, CreateInviteInvitesPostData, CreateInviteInvitesPostError, CreateInviteInvitesPostResponse, ValidateTokenInvitesTokenTokenGetData, PostSubscriptionNotificationsSubscriptionPostData, PostSubscriptionNotificationsSubscriptionPostError, PostSubscriptionNotificationsSubscriptionPostResponse, RootGetData, HelloHelloGetData } from '../types.gen';
import type { AxiosError } from 'axios';
import { loginAccessTokenLoginAccessTokenPost, testTokenLoginTestTokenPost, resetPasswordRequestResetPasswordRequestEmailPost, resetPasswordResetPasswordTokenPost, recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPost, deleteUserMePartiesMeDelete, readUserMePartiesMeGet, updateUserMePartiesMePatch, createUserPartiesUserPost, registerUserPartiesRegisterTokenPost, readUsersPartiesUsersGet, readUserByIdPartiesUserUserApiIdGet, updatePasswordMePartiesMePasswordPatch, signupPartiesSignupPost, deleteUserPartiesUserIdDelete, updateUserPartiesUserIdPatch, createGroupPartiesGroupPost, listGroupsPartiesGroupsGet, readGroupPartiesGroupGroupApiIdGet, updateGroupPartiesGroupGroupApiIdPatch, addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPost, removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPost, scheduleSendPartiesGroupGroupApiIdScheduleSendPost, addMembersPartiesGroupGroupApiIdAddMembersPost, replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPost, addNextLetterLettersLetterPost, listLettersLettersLettersGet, readLetterLettersLetterLetterApiIdGet, listDashboardLettersLettersLettersDashboardGet, editLetterLettersLetterLetterApiIdEditLetterPost, addQuestionLettersLetterLetterApiIdAddQuestionPost, getScheduleForGroupScheduleScheduleGroupApiIdGet, upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePost, uploadImageQuestionsQuestionQuestionApiIdUploadImagePost, editResponseResponsesResponseResponseApiIdEditResponsePost, uploadImageResponsesResponseResponseApiIdUploadImagePost, createInviteInvitesPost, validateTokenInvitesTokenTokenGet, postSubscriptionNotificationsSubscriptionPost, rootGet, helloHelloGet } from '../sdk.gen';
import { client as _heyApiClient } from '../client.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const loginAccessTokenLoginAccessTokenPostQueryKey = (options: Options<LoginAccessTokenLoginAccessTokenPostData>) => [
    createQueryKey('loginAccessTokenLoginAccessTokenPost', options)
];

export const loginAccessTokenLoginAccessTokenPostOptions = (options: Options<LoginAccessTokenLoginAccessTokenPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginAccessTokenLoginAccessTokenPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginAccessTokenLoginAccessTokenPostQueryKey(options)
    });
};

export const loginAccessTokenLoginAccessTokenPostMutation = (options?: Partial<Options<LoginAccessTokenLoginAccessTokenPostData>>) => {
    const mutationOptions: UseMutationOptions<LoginAccessTokenLoginAccessTokenPostResponse, AxiosError<LoginAccessTokenLoginAccessTokenPostError>, Options<LoginAccessTokenLoginAccessTokenPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginAccessTokenLoginAccessTokenPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const testTokenLoginTestTokenPostQueryKey = (options?: Options<TestTokenLoginTestTokenPostData>) => [
    createQueryKey('testTokenLoginTestTokenPost', options)
];

export const testTokenLoginTestTokenPostOptions = (options?: Options<TestTokenLoginTestTokenPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testTokenLoginTestTokenPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testTokenLoginTestTokenPostQueryKey(options)
    });
};

export const testTokenLoginTestTokenPostMutation = (options?: Partial<Options<TestTokenLoginTestTokenPostData>>) => {
    const mutationOptions: UseMutationOptions<TestTokenLoginTestTokenPostResponse, AxiosError<DefaultError>, Options<TestTokenLoginTestTokenPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await testTokenLoginTestTokenPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetPasswordRequestResetPasswordRequestEmailPostQueryKey = (options: Options<ResetPasswordRequestResetPasswordRequestEmailPostData>) => [
    createQueryKey('resetPasswordRequestResetPasswordRequestEmailPost', options)
];

export const resetPasswordRequestResetPasswordRequestEmailPostOptions = (options: Options<ResetPasswordRequestResetPasswordRequestEmailPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordRequestResetPasswordRequestEmailPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordRequestResetPasswordRequestEmailPostQueryKey(options)
    });
};

export const resetPasswordRequestResetPasswordRequestEmailPostMutation = (options?: Partial<Options<ResetPasswordRequestResetPasswordRequestEmailPostData>>) => {
    const mutationOptions: UseMutationOptions<ResetPasswordRequestResetPasswordRequestEmailPostResponse, AxiosError<ResetPasswordRequestResetPasswordRequestEmailPostError>, Options<ResetPasswordRequestResetPasswordRequestEmailPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetPasswordRequestResetPasswordRequestEmailPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetPasswordResetPasswordTokenPostQueryKey = (options: Options<ResetPasswordResetPasswordTokenPostData>) => [
    createQueryKey('resetPasswordResetPasswordTokenPost', options)
];

export const resetPasswordResetPasswordTokenPostOptions = (options: Options<ResetPasswordResetPasswordTokenPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordResetPasswordTokenPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordResetPasswordTokenPostQueryKey(options)
    });
};

export const resetPasswordResetPasswordTokenPostMutation = (options?: Partial<Options<ResetPasswordResetPasswordTokenPostData>>) => {
    const mutationOptions: UseMutationOptions<ResetPasswordResetPasswordTokenPostResponse, AxiosError<ResetPasswordResetPasswordTokenPostError>, Options<ResetPasswordResetPasswordTokenPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetPasswordResetPasswordTokenPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostQueryKey = (options: Options<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData>) => [
    createQueryKey('recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPost', options)
];

export const recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostOptions = (options: Options<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostQueryKey(options)
    });
};

export const recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostMutation = (options?: Partial<Options<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData>>) => {
    const mutationOptions: UseMutationOptions<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponse, AxiosError<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostError>, Options<RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await recoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserMePartiesMeDeleteMutation = (options?: Partial<Options<DeleteUserMePartiesMeDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteUserMePartiesMeDeleteResponse, AxiosError<DefaultError>, Options<DeleteUserMePartiesMeDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserMePartiesMeDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readUserMePartiesMeGetQueryKey = (options?: Options<ReadUserMePartiesMeGetData>) => [
    createQueryKey('readUserMePartiesMeGet', options)
];

export const readUserMePartiesMeGetOptions = (options?: Options<ReadUserMePartiesMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUserMePartiesMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUserMePartiesMeGetQueryKey(options)
    });
};

export const updateUserMePartiesMePatchMutation = (options?: Partial<Options<UpdateUserMePartiesMePatchData>>) => {
    const mutationOptions: UseMutationOptions<UpdateUserMePartiesMePatchResponse, AxiosError<UpdateUserMePartiesMePatchError>, Options<UpdateUserMePartiesMePatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUserMePartiesMePatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createUserPartiesUserPostQueryKey = (options: Options<CreateUserPartiesUserPostData>) => [
    createQueryKey('createUserPartiesUserPost', options)
];

export const createUserPartiesUserPostOptions = (options: Options<CreateUserPartiesUserPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUserPartiesUserPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserPartiesUserPostQueryKey(options)
    });
};

export const createUserPartiesUserPostMutation = (options?: Partial<Options<CreateUserPartiesUserPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateUserPartiesUserPostResponse, AxiosError<CreateUserPartiesUserPostError>, Options<CreateUserPartiesUserPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUserPartiesUserPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const registerUserPartiesRegisterTokenPostQueryKey = (options: Options<RegisterUserPartiesRegisterTokenPostData>) => [
    createQueryKey('registerUserPartiesRegisterTokenPost', options)
];

export const registerUserPartiesRegisterTokenPostOptions = (options: Options<RegisterUserPartiesRegisterTokenPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerUserPartiesRegisterTokenPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerUserPartiesRegisterTokenPostQueryKey(options)
    });
};

export const registerUserPartiesRegisterTokenPostMutation = (options?: Partial<Options<RegisterUserPartiesRegisterTokenPostData>>) => {
    const mutationOptions: UseMutationOptions<RegisterUserPartiesRegisterTokenPostResponse, AxiosError<RegisterUserPartiesRegisterTokenPostError>, Options<RegisterUserPartiesRegisterTokenPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerUserPartiesRegisterTokenPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readUsersPartiesUsersGetQueryKey = (options?: Options<ReadUsersPartiesUsersGetData>) => [
    createQueryKey('readUsersPartiesUsersGet', options)
];

export const readUsersPartiesUsersGetOptions = (options?: Options<ReadUsersPartiesUsersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUsersPartiesUsersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUsersPartiesUsersGetQueryKey(options)
    });
};

export const readUserByIdPartiesUserUserApiIdGetQueryKey = (options: Options<ReadUserByIdPartiesUserUserApiIdGetData>) => [
    createQueryKey('readUserByIdPartiesUserUserApiIdGet', options)
];

export const readUserByIdPartiesUserUserApiIdGetOptions = (options: Options<ReadUserByIdPartiesUserUserApiIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUserByIdPartiesUserUserApiIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUserByIdPartiesUserUserApiIdGetQueryKey(options)
    });
};

export const updatePasswordMePartiesMePasswordPatchMutation = (options?: Partial<Options<UpdatePasswordMePartiesMePasswordPatchData>>) => {
    const mutationOptions: UseMutationOptions<UpdatePasswordMePartiesMePasswordPatchResponse, AxiosError<UpdatePasswordMePartiesMePasswordPatchError>, Options<UpdatePasswordMePartiesMePasswordPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updatePasswordMePartiesMePasswordPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const signupPartiesSignupPostQueryKey = (options?: Options<SignupPartiesSignupPostData>) => [
    createQueryKey('signupPartiesSignupPost', options)
];

export const signupPartiesSignupPostOptions = (options?: Options<SignupPartiesSignupPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await signupPartiesSignupPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: signupPartiesSignupPostQueryKey(options)
    });
};

export const signupPartiesSignupPostMutation = (options?: Partial<Options<SignupPartiesSignupPostData>>) => {
    const mutationOptions: UseMutationOptions<SignupPartiesSignupPostResponse, AxiosError<DefaultError>, Options<SignupPartiesSignupPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await signupPartiesSignupPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserPartiesUserIdDeleteMutation = (options?: Partial<Options<DeleteUserPartiesUserIdDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteUserPartiesUserIdDeleteResponse, AxiosError<DefaultError>, Options<DeleteUserPartiesUserIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserPartiesUserIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateUserPartiesUserIdPatchMutation = (options?: Partial<Options<UpdateUserPartiesUserIdPatchData>>) => {
    const mutationOptions: UseMutationOptions<UpdateUserPartiesUserIdPatchResponse, AxiosError<DefaultError>, Options<UpdateUserPartiesUserIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUserPartiesUserIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createGroupPartiesGroupPostQueryKey = (options: Options<CreateGroupPartiesGroupPostData>) => [
    createQueryKey('createGroupPartiesGroupPost', options)
];

export const createGroupPartiesGroupPostOptions = (options: Options<CreateGroupPartiesGroupPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createGroupPartiesGroupPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createGroupPartiesGroupPostQueryKey(options)
    });
};

export const createGroupPartiesGroupPostMutation = (options?: Partial<Options<CreateGroupPartiesGroupPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateGroupPartiesGroupPostResponse, AxiosError<CreateGroupPartiesGroupPostError>, Options<CreateGroupPartiesGroupPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createGroupPartiesGroupPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listGroupsPartiesGroupsGetQueryKey = (options: Options<ListGroupsPartiesGroupsGetData>) => [
    createQueryKey('listGroupsPartiesGroupsGet', options)
];

export const listGroupsPartiesGroupsGetOptions = (options: Options<ListGroupsPartiesGroupsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listGroupsPartiesGroupsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listGroupsPartiesGroupsGetQueryKey(options)
    });
};

export const readGroupPartiesGroupGroupApiIdGetQueryKey = (options: Options<ReadGroupPartiesGroupGroupApiIdGetData>) => [
    createQueryKey('readGroupPartiesGroupGroupApiIdGet', options)
];

export const readGroupPartiesGroupGroupApiIdGetOptions = (options: Options<ReadGroupPartiesGroupGroupApiIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readGroupPartiesGroupGroupApiIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readGroupPartiesGroupGroupApiIdGetQueryKey(options)
    });
};

export const updateGroupPartiesGroupGroupApiIdPatchMutation = (options?: Partial<Options<UpdateGroupPartiesGroupGroupApiIdPatchData>>) => {
    const mutationOptions: UseMutationOptions<UpdateGroupPartiesGroupGroupApiIdPatchResponse, AxiosError<UpdateGroupPartiesGroupGroupApiIdPatchError>, Options<UpdateGroupPartiesGroupGroupApiIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateGroupPartiesGroupGroupApiIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostQueryKey = (options: Options<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData>) => [
    createQueryKey('addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPost', options)
];

export const addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostOptions = (options: Options<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostQueryKey(options)
    });
};

export const addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostMutation = (options?: Partial<Options<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData>>) => {
    const mutationOptions: UseMutationOptions<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponse, AxiosError<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostError>, Options<AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostQueryKey = (options: Options<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData>) => [
    createQueryKey('removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPost', options)
];

export const removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostOptions = (options: Options<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostQueryKey(options)
    });
};

export const removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostMutation = (options?: Partial<Options<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData>>) => {
    const mutationOptions: UseMutationOptions<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponse, AxiosError<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostError>, Options<RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const scheduleSendPartiesGroupGroupApiIdScheduleSendPostQueryKey = (options: Options<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData>) => [
    createQueryKey('scheduleSendPartiesGroupGroupApiIdScheduleSendPost', options)
];

export const scheduleSendPartiesGroupGroupApiIdScheduleSendPostOptions = (options: Options<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await scheduleSendPartiesGroupGroupApiIdScheduleSendPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: scheduleSendPartiesGroupGroupApiIdScheduleSendPostQueryKey(options)
    });
};

export const scheduleSendPartiesGroupGroupApiIdScheduleSendPostMutation = (options?: Partial<Options<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData>>) => {
    const mutationOptions: UseMutationOptions<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponse, AxiosError<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostError>, Options<ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await scheduleSendPartiesGroupGroupApiIdScheduleSendPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addMembersPartiesGroupGroupApiIdAddMembersPostQueryKey = (options: Options<AddMembersPartiesGroupGroupApiIdAddMembersPostData>) => [
    createQueryKey('addMembersPartiesGroupGroupApiIdAddMembersPost', options)
];

export const addMembersPartiesGroupGroupApiIdAddMembersPostOptions = (options: Options<AddMembersPartiesGroupGroupApiIdAddMembersPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addMembersPartiesGroupGroupApiIdAddMembersPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addMembersPartiesGroupGroupApiIdAddMembersPostQueryKey(options)
    });
};

export const addMembersPartiesGroupGroupApiIdAddMembersPostMutation = (options?: Partial<Options<AddMembersPartiesGroupGroupApiIdAddMembersPostData>>) => {
    const mutationOptions: UseMutationOptions<AddMembersPartiesGroupGroupApiIdAddMembersPostResponse, AxiosError<AddMembersPartiesGroupGroupApiIdAddMembersPostError>, Options<AddMembersPartiesGroupGroupApiIdAddMembersPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addMembersPartiesGroupGroupApiIdAddMembersPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostQueryKey = (options: Options<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData>) => [
    createQueryKey('replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPost', options)
];

export const replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostOptions = (options: Options<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostQueryKey(options)
    });
};

export const replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostMutation = (options?: Partial<Options<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData>>) => {
    const mutationOptions: UseMutationOptions<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponse, AxiosError<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostError>, Options<ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await replaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addNextLetterLettersLetterPostQueryKey = (options: Options<AddNextLetterLettersLetterPostData>) => [
    createQueryKey('addNextLetterLettersLetterPost', options)
];

export const addNextLetterLettersLetterPostOptions = (options: Options<AddNextLetterLettersLetterPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addNextLetterLettersLetterPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addNextLetterLettersLetterPostQueryKey(options)
    });
};

export const addNextLetterLettersLetterPostMutation = (options?: Partial<Options<AddNextLetterLettersLetterPostData>>) => {
    const mutationOptions: UseMutationOptions<AddNextLetterLettersLetterPostResponse, AxiosError<AddNextLetterLettersLetterPostError>, Options<AddNextLetterLettersLetterPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addNextLetterLettersLetterPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listLettersLettersLettersGetQueryKey = (options: Options<ListLettersLettersLettersGetData>) => [
    createQueryKey('listLettersLettersLettersGet', options)
];

export const listLettersLettersLettersGetOptions = (options: Options<ListLettersLettersLettersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listLettersLettersLettersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listLettersLettersLettersGetQueryKey(options)
    });
};

export const readLetterLettersLetterLetterApiIdGetQueryKey = (options: Options<ReadLetterLettersLetterLetterApiIdGetData>) => [
    createQueryKey('readLetterLettersLetterLetterApiIdGet', options)
];

export const readLetterLettersLetterLetterApiIdGetOptions = (options: Options<ReadLetterLettersLetterLetterApiIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readLetterLettersLetterLetterApiIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readLetterLettersLetterLetterApiIdGetQueryKey(options)
    });
};

export const listDashboardLettersLettersLettersDashboardGetQueryKey = (options?: Options<ListDashboardLettersLettersLettersDashboardGetData>) => [
    createQueryKey('listDashboardLettersLettersLettersDashboardGet', options)
];

export const listDashboardLettersLettersLettersDashboardGetOptions = (options?: Options<ListDashboardLettersLettersLettersDashboardGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDashboardLettersLettersLettersDashboardGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDashboardLettersLettersLettersDashboardGetQueryKey(options)
    });
};

export const editLetterLettersLetterLetterApiIdEditLetterPostQueryKey = (options: Options<EditLetterLettersLetterLetterApiIdEditLetterPostData>) => [
    createQueryKey('editLetterLettersLetterLetterApiIdEditLetterPost', options)
];

export const editLetterLettersLetterLetterApiIdEditLetterPostOptions = (options: Options<EditLetterLettersLetterLetterApiIdEditLetterPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await editLetterLettersLetterLetterApiIdEditLetterPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: editLetterLettersLetterLetterApiIdEditLetterPostQueryKey(options)
    });
};

export const editLetterLettersLetterLetterApiIdEditLetterPostMutation = (options?: Partial<Options<EditLetterLettersLetterLetterApiIdEditLetterPostData>>) => {
    const mutationOptions: UseMutationOptions<EditLetterLettersLetterLetterApiIdEditLetterPostResponse, AxiosError<EditLetterLettersLetterLetterApiIdEditLetterPostError>, Options<EditLetterLettersLetterLetterApiIdEditLetterPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await editLetterLettersLetterLetterApiIdEditLetterPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addQuestionLettersLetterLetterApiIdAddQuestionPostQueryKey = (options: Options<AddQuestionLettersLetterLetterApiIdAddQuestionPostData>) => [
    createQueryKey('addQuestionLettersLetterLetterApiIdAddQuestionPost', options)
];

export const addQuestionLettersLetterLetterApiIdAddQuestionPostOptions = (options: Options<AddQuestionLettersLetterLetterApiIdAddQuestionPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addQuestionLettersLetterLetterApiIdAddQuestionPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addQuestionLettersLetterLetterApiIdAddQuestionPostQueryKey(options)
    });
};

export const addQuestionLettersLetterLetterApiIdAddQuestionPostMutation = (options?: Partial<Options<AddQuestionLettersLetterLetterApiIdAddQuestionPostData>>) => {
    const mutationOptions: UseMutationOptions<AddQuestionLettersLetterLetterApiIdAddQuestionPostResponse, AxiosError<AddQuestionLettersLetterLetterApiIdAddQuestionPostError>, Options<AddQuestionLettersLetterLetterApiIdAddQuestionPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addQuestionLettersLetterLetterApiIdAddQuestionPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScheduleForGroupScheduleScheduleGroupApiIdGetQueryKey = (options: Options<GetScheduleForGroupScheduleScheduleGroupApiIdGetData>) => [
    createQueryKey('getScheduleForGroupScheduleScheduleGroupApiIdGet', options)
];

export const getScheduleForGroupScheduleScheduleGroupApiIdGetOptions = (options: Options<GetScheduleForGroupScheduleScheduleGroupApiIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScheduleForGroupScheduleScheduleGroupApiIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScheduleForGroupScheduleScheduleGroupApiIdGetQueryKey(options)
    });
};

export const upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostQueryKey = (options: Options<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData>) => [
    createQueryKey('upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePost', options)
];

export const upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostOptions = (options: Options<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostQueryKey(options)
    });
};

export const upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostMutation = (options?: Partial<Options<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData>>) => {
    const mutationOptions: UseMutationOptions<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponse, AxiosError<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostError>, Options<UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await upsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadImageQuestionsQuestionQuestionApiIdUploadImagePostQueryKey = (options: Options<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData>) => [
    createQueryKey('uploadImageQuestionsQuestionQuestionApiIdUploadImagePost', options)
];

export const uploadImageQuestionsQuestionQuestionApiIdUploadImagePostOptions = (options: Options<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadImageQuestionsQuestionQuestionApiIdUploadImagePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadImageQuestionsQuestionQuestionApiIdUploadImagePostQueryKey(options)
    });
};

export const uploadImageQuestionsQuestionQuestionApiIdUploadImagePostMutation = (options?: Partial<Options<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData>>) => {
    const mutationOptions: UseMutationOptions<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponse, AxiosError<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostError>, Options<UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadImageQuestionsQuestionQuestionApiIdUploadImagePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const editResponseResponsesResponseResponseApiIdEditResponsePostQueryKey = (options: Options<EditResponseResponsesResponseResponseApiIdEditResponsePostData>) => [
    createQueryKey('editResponseResponsesResponseResponseApiIdEditResponsePost', options)
];

export const editResponseResponsesResponseResponseApiIdEditResponsePostOptions = (options: Options<EditResponseResponsesResponseResponseApiIdEditResponsePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await editResponseResponsesResponseResponseApiIdEditResponsePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: editResponseResponsesResponseResponseApiIdEditResponsePostQueryKey(options)
    });
};

export const editResponseResponsesResponseResponseApiIdEditResponsePostMutation = (options?: Partial<Options<EditResponseResponsesResponseResponseApiIdEditResponsePostData>>) => {
    const mutationOptions: UseMutationOptions<EditResponseResponsesResponseResponseApiIdEditResponsePostResponse, AxiosError<EditResponseResponsesResponseResponseApiIdEditResponsePostError>, Options<EditResponseResponsesResponseResponseApiIdEditResponsePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await editResponseResponsesResponseResponseApiIdEditResponsePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadImageResponsesResponseResponseApiIdUploadImagePostQueryKey = (options: Options<UploadImageResponsesResponseResponseApiIdUploadImagePostData>) => [
    createQueryKey('uploadImageResponsesResponseResponseApiIdUploadImagePost', options)
];

export const uploadImageResponsesResponseResponseApiIdUploadImagePostOptions = (options: Options<UploadImageResponsesResponseResponseApiIdUploadImagePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadImageResponsesResponseResponseApiIdUploadImagePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadImageResponsesResponseResponseApiIdUploadImagePostQueryKey(options)
    });
};

export const uploadImageResponsesResponseResponseApiIdUploadImagePostMutation = (options?: Partial<Options<UploadImageResponsesResponseResponseApiIdUploadImagePostData>>) => {
    const mutationOptions: UseMutationOptions<UploadImageResponsesResponseResponseApiIdUploadImagePostResponse, AxiosError<UploadImageResponsesResponseResponseApiIdUploadImagePostError>, Options<UploadImageResponsesResponseResponseApiIdUploadImagePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadImageResponsesResponseResponseApiIdUploadImagePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createInviteInvitesPostQueryKey = (options: Options<CreateInviteInvitesPostData>) => [
    createQueryKey('createInviteInvitesPost', options)
];

export const createInviteInvitesPostOptions = (options: Options<CreateInviteInvitesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createInviteInvitesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createInviteInvitesPostQueryKey(options)
    });
};

export const createInviteInvitesPostMutation = (options?: Partial<Options<CreateInviteInvitesPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateInviteInvitesPostResponse, AxiosError<CreateInviteInvitesPostError>, Options<CreateInviteInvitesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createInviteInvitesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const validateTokenInvitesTokenTokenGetQueryKey = (options: Options<ValidateTokenInvitesTokenTokenGetData>) => [
    createQueryKey('validateTokenInvitesTokenTokenGet', options)
];

export const validateTokenInvitesTokenTokenGetOptions = (options: Options<ValidateTokenInvitesTokenTokenGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await validateTokenInvitesTokenTokenGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: validateTokenInvitesTokenTokenGetQueryKey(options)
    });
};

export const postSubscriptionNotificationsSubscriptionPostQueryKey = (options: Options<PostSubscriptionNotificationsSubscriptionPostData>) => [
    createQueryKey('postSubscriptionNotificationsSubscriptionPost', options)
];

export const postSubscriptionNotificationsSubscriptionPostOptions = (options: Options<PostSubscriptionNotificationsSubscriptionPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postSubscriptionNotificationsSubscriptionPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postSubscriptionNotificationsSubscriptionPostQueryKey(options)
    });
};

export const postSubscriptionNotificationsSubscriptionPostMutation = (options?: Partial<Options<PostSubscriptionNotificationsSubscriptionPostData>>) => {
    const mutationOptions: UseMutationOptions<PostSubscriptionNotificationsSubscriptionPostResponse, AxiosError<PostSubscriptionNotificationsSubscriptionPostError>, Options<PostSubscriptionNotificationsSubscriptionPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postSubscriptionNotificationsSubscriptionPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => [
    createQueryKey('rootGet', options)
];

export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const helloHelloGetQueryKey = (options?: Options<HelloHelloGetData>) => [
    createQueryKey('helloHelloGet', options)
];

export const helloHelloGetOptions = (options?: Options<HelloHelloGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await helloHelloGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: helloHelloGetQueryKey(options)
    });
};