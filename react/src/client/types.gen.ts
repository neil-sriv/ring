// This file is auto-generated by @hey-api/openapi-ts

export type AddMembers = {
    member_emails: Array<string>;
};

export type BodyLoginAccessTokenLoginAccessTokenPost = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type BodyUploadImageQuestionsQuestionQuestionApiIdUploadImagePost = {
    response_image: Blob | File;
};

export type BodyUploadImageResponsesResponseResponseApiIdUploadImagePost = {
    response_images: Array<Blob | File>;
};

export type DashboardLetters = {
    upcoming: Array<PublicLetter>;
    in_progress: Array<PublicLetter>;
    recently_completed: Array<PublicLetter>;
};

export type GroupCreate = {
    name: string;
    admin_api_identifier: string;
};

export type GroupLinked = {
    name: string;
    api_identifier: string;
    created_at: string;
    members: Array<UserUnlinked>;
    letters: Array<LetterUnlinked>;
    schedule: ScheduleUnlinked | null;
    admin: UserUnlinked;
    default_questions: Array<QuestionUnlinked>;
};

export type GroupUnlinked = {
    name: string;
    api_identifier: string;
    created_at: string;
};

export type GroupUpdate = {
    name?: string | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Image = {
    s3_url: string;
    media_type: MediaType;
};

export type InviteCreate = {
    email: string;
    group_api_id: string;
};

export type InviteLinked = {
    email: string;
    api_identifier: string;
    created_at: string;
    inviter: UserUnlinked;
    group: GroupUnlinked;
    readonly token: string;
    readonly is_expired: boolean;
};

export type LetterCreate = {
    group_api_identifier: string;
    send_at: string;
};

export type LetterStatus = 'UPCOMING' | 'IN_PROGRESS' | 'SENT';

export type LetterUnlinked = {
    api_identifier: string;
    number: number;
    status: LetterStatus;
    send_at: string;
    created_at: string;
};

export type LetterUpdate = {
    send_at: string;
};

export type MediaType = 'image' | 'video';

export type NewPassword = {
    new_password: string;
};

export type PublicLetter = {
    api_identifier: string;
    number: number;
    status: LetterStatus;
    send_at: string;
    created_at: string;
    group: GroupUnlinked;
    questions: Array<PublicQuestion>;
};

export type PublicQuestion = {
    question_text: string;
    api_identifier: string;
    created_at: string;
    responses: Array<ResponseWithParticipant>;
    author: UserUnlinked | null;
};

export type QuestionCreate = {
    question_text: string;
    author_api_id: string | null;
};

export type QuestionLinked = {
    question_text: string;
    api_identifier: string;
    created_at: string;
    letter: LetterUnlinked;
    responses: Array<ResponseUnlinked>;
};

export type QuestionUnlinked = {
    question_text: string;
    api_identifier: string;
    created_at: string;
};

export type ReplaceDefaultQuestions = {
    questions: Array<string>;
};

export type ResponseCreateBase = {
    response_text: string;
};

export type ResponseLinked = {
    response_text: string;
    api_identifier: string;
    created_at: string;
    question: QuestionUnlinked;
    participant: UserUnlinked;
    readonly images: Array<Image>;
};

export type ResponseMessage = {
    message: string;
};

export type ResponseUnlinked = {
    response_text: string;
    api_identifier: string;
    created_at: string;
};

export type ResponseUpsert = {
    response_text: string;
    participant_api_identifier?: string | null;
    api_identifier?: string | null;
};

export type ResponseWithParticipant = {
    response_text: string;
    api_identifier: string;
    created_at: string;
    participant: UserUnlinked;
    readonly images: Array<Image>;
};

export type ScheduleLinked = {
    group: GroupUnlinked;
    tasks: Array<TaskUnlinked>;
};

export type ScheduleSendParam = {
    letter_api_id: string;
    send_at: string;
};

export type ScheduleUnlinked = {
    tasks: Array<TaskUnlinked>;
};

export type TaskUnlinked = {
    type: string;
    status: string;
    execute_at: string;
    arguments: {
        [key: string]: string;
    };
};

export type Token = {
    access_token: string;
    token_type: string;
};

export type UserCreate = {
    email: string;
    name: string;
    password: string;
};

export type UserLinked = {
    email: string;
    name: string;
    api_identifier: string;
    groups: Array<GroupUnlinked>;
    responses: Array<ResponseUnlinked>;
};

export type UserUnlinked = {
    email: string;
    name: string;
    api_identifier: string;
};

export type UserUpdate = {
    email?: string | null;
    name?: string | null;
};

export type UserUpdatePassword = {
    current_password: string;
    new_password: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type LoginAccessTokenLoginAccessTokenPostData = {
    body: BodyLoginAccessTokenLoginAccessTokenPost;
    path?: never;
    query?: never;
    url: '/login/access-token';
};

export type LoginAccessTokenLoginAccessTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAccessTokenLoginAccessTokenPostError = LoginAccessTokenLoginAccessTokenPostErrors[keyof LoginAccessTokenLoginAccessTokenPostErrors];

export type LoginAccessTokenLoginAccessTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginAccessTokenLoginAccessTokenPostResponse = LoginAccessTokenLoginAccessTokenPostResponses[keyof LoginAccessTokenLoginAccessTokenPostResponses];

export type TestTokenLoginTestTokenPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/login/test-token';
};

export type TestTokenLoginTestTokenPostResponses = {
    /**
     * Successful Response
     */
    200: null;
};

export type TestTokenLoginTestTokenPostResponse = TestTokenLoginTestTokenPostResponses[keyof TestTokenLoginTestTokenPostResponses];

export type ResetPasswordRequestResetPasswordRequestEmailPostData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/reset-password:request/{email}';
};

export type ResetPasswordRequestResetPasswordRequestEmailPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetPasswordRequestResetPasswordRequestEmailPostError = ResetPasswordRequestResetPasswordRequestEmailPostErrors[keyof ResetPasswordRequestResetPasswordRequestEmailPostErrors];

export type ResetPasswordRequestResetPasswordRequestEmailPostResponses = {
    /**
     * Successful Response
     */
    200: ResponseMessage;
};

export type ResetPasswordRequestResetPasswordRequestEmailPostResponse = ResetPasswordRequestResetPasswordRequestEmailPostResponses[keyof ResetPasswordRequestResetPasswordRequestEmailPostResponses];

export type ResetPasswordResetPasswordTokenPostData = {
    body: NewPassword;
    path: {
        token: string;
    };
    query?: never;
    url: '/reset-password/{token}';
};

export type ResetPasswordResetPasswordTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetPasswordResetPasswordTokenPostError = ResetPasswordResetPasswordTokenPostErrors[keyof ResetPasswordResetPasswordTokenPostErrors];

export type ResetPasswordResetPasswordTokenPostResponses = {
    /**
     * Successful Response
     */
    200: ResponseMessage;
};

export type ResetPasswordResetPasswordTokenPostResponse = ResetPasswordResetPasswordTokenPostResponses[keyof ResetPasswordResetPasswordTokenPostResponses];

export type RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/password-recovery-html-content/{email}';
};

export type RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostError = RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostErrors[keyof RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostErrors];

export type RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponses = {
    /**
     * Successful Response
     */
    200: null;
};

export type RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponse = RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponses[keyof RecoverPasswordHtmlContentPasswordRecoveryHtmlContentEmailPostResponses];

export type DeleteUserMePartiesMeDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/parties/me';
};

export type DeleteUserMePartiesMeDeleteResponses = {
    /**
     * Successful Response
     */
    200: null;
};

export type DeleteUserMePartiesMeDeleteResponse = DeleteUserMePartiesMeDeleteResponses[keyof DeleteUserMePartiesMeDeleteResponses];

export type ReadUserMePartiesMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/parties/me';
};

export type ReadUserMePartiesMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserLinked;
};

export type ReadUserMePartiesMeGetResponse = ReadUserMePartiesMeGetResponses[keyof ReadUserMePartiesMeGetResponses];

export type UpdateUserMePartiesMePatchData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/parties/me';
};

export type UpdateUserMePartiesMePatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserMePartiesMePatchError = UpdateUserMePartiesMePatchErrors[keyof UpdateUserMePartiesMePatchErrors];

export type UpdateUserMePartiesMePatchResponses = {
    /**
     * Successful Response
     */
    200: UserLinked;
};

export type UpdateUserMePartiesMePatchResponse = UpdateUserMePartiesMePatchResponses[keyof UpdateUserMePartiesMePatchResponses];

export type CreateUserPartiesUserPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/parties/user';
};

export type CreateUserPartiesUserPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserPartiesUserPostError = CreateUserPartiesUserPostErrors[keyof CreateUserPartiesUserPostErrors];

export type CreateUserPartiesUserPostResponses = {
    /**
     * Successful Response
     */
    201: UserLinked;
};

export type CreateUserPartiesUserPostResponse = CreateUserPartiesUserPostResponses[keyof CreateUserPartiesUserPostResponses];

export type RegisterUserPartiesRegisterTokenPostData = {
    body: UserCreate;
    path: {
        token: string;
    };
    query?: never;
    url: '/parties/register/{token}';
};

export type RegisterUserPartiesRegisterTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserPartiesRegisterTokenPostError = RegisterUserPartiesRegisterTokenPostErrors[keyof RegisterUserPartiesRegisterTokenPostErrors];

export type RegisterUserPartiesRegisterTokenPostResponses = {
    /**
     * Successful Response
     */
    200: UserLinked;
};

export type RegisterUserPartiesRegisterTokenPostResponse = RegisterUserPartiesRegisterTokenPostResponses[keyof RegisterUserPartiesRegisterTokenPostResponses];

export type ReadUsersPartiesUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/parties/users';
};

export type ReadUsersPartiesUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUsersPartiesUsersGetError = ReadUsersPartiesUsersGetErrors[keyof ReadUsersPartiesUsersGetErrors];

export type ReadUsersPartiesUsersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserLinked>;
};

export type ReadUsersPartiesUsersGetResponse = ReadUsersPartiesUsersGetResponses[keyof ReadUsersPartiesUsersGetResponses];

export type ReadUserByIdPartiesUserUserApiIdGetData = {
    body?: never;
    path: {
        user_api_id: string;
    };
    query?: never;
    url: '/parties/user/{user_api_id}';
};

export type ReadUserByIdPartiesUserUserApiIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUserByIdPartiesUserUserApiIdGetError = ReadUserByIdPartiesUserUserApiIdGetErrors[keyof ReadUserByIdPartiesUserUserApiIdGetErrors];

export type ReadUserByIdPartiesUserUserApiIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserLinked;
};

export type ReadUserByIdPartiesUserUserApiIdGetResponse = ReadUserByIdPartiesUserUserApiIdGetResponses[keyof ReadUserByIdPartiesUserUserApiIdGetResponses];

export type UpdatePasswordMePartiesMePasswordPatchData = {
    body: UserUpdatePassword;
    path?: never;
    query?: never;
    url: '/parties/me/password';
};

export type UpdatePasswordMePartiesMePasswordPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePasswordMePartiesMePasswordPatchError = UpdatePasswordMePartiesMePasswordPatchErrors[keyof UpdatePasswordMePartiesMePasswordPatchErrors];

export type UpdatePasswordMePartiesMePasswordPatchResponses = {
    /**
     * Successful Response
     */
    200: ResponseMessage;
};

export type UpdatePasswordMePartiesMePasswordPatchResponse = UpdatePasswordMePartiesMePasswordPatchResponses[keyof UpdatePasswordMePartiesMePasswordPatchResponses];

export type SignupPartiesSignupPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/parties/signup';
};

export type SignupPartiesSignupPostResponses = {
    /**
     * Successful Response
     */
    200: null;
};

export type SignupPartiesSignupPostResponse = SignupPartiesSignupPostResponses[keyof SignupPartiesSignupPostResponses];

export type DeleteUserPartiesUserIdDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/parties/{user_id}';
};

export type DeleteUserPartiesUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: null;
};

export type DeleteUserPartiesUserIdDeleteResponse = DeleteUserPartiesUserIdDeleteResponses[keyof DeleteUserPartiesUserIdDeleteResponses];

export type UpdateUserPartiesUserIdPatchData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/parties/{user_id}';
};

export type UpdateUserPartiesUserIdPatchResponses = {
    /**
     * Successful Response
     */
    200: null;
};

export type UpdateUserPartiesUserIdPatchResponse = UpdateUserPartiesUserIdPatchResponses[keyof UpdateUserPartiesUserIdPatchResponses];

export type CreateGroupPartiesGroupPostData = {
    body: GroupCreate;
    path?: never;
    query?: never;
    url: '/parties/group';
};

export type CreateGroupPartiesGroupPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateGroupPartiesGroupPostError = CreateGroupPartiesGroupPostErrors[keyof CreateGroupPartiesGroupPostErrors];

export type CreateGroupPartiesGroupPostResponses = {
    /**
     * Successful Response
     */
    201: GroupLinked;
};

export type CreateGroupPartiesGroupPostResponse = CreateGroupPartiesGroupPostResponses[keyof CreateGroupPartiesGroupPostResponses];

export type ListGroupsPartiesGroupsGetData = {
    body?: never;
    path?: never;
    query: {
        user_api_id: string;
        skip?: number;
        limit?: number;
    };
    url: '/parties/groups/';
};

export type ListGroupsPartiesGroupsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListGroupsPartiesGroupsGetError = ListGroupsPartiesGroupsGetErrors[keyof ListGroupsPartiesGroupsGetErrors];

export type ListGroupsPartiesGroupsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<GroupLinked>;
};

export type ListGroupsPartiesGroupsGetResponse = ListGroupsPartiesGroupsGetResponses[keyof ListGroupsPartiesGroupsGetResponses];

export type ReadGroupPartiesGroupGroupApiIdGetData = {
    body?: never;
    path: {
        group_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}';
};

export type ReadGroupPartiesGroupGroupApiIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadGroupPartiesGroupGroupApiIdGetError = ReadGroupPartiesGroupGroupApiIdGetErrors[keyof ReadGroupPartiesGroupGroupApiIdGetErrors];

export type ReadGroupPartiesGroupGroupApiIdGetResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type ReadGroupPartiesGroupGroupApiIdGetResponse = ReadGroupPartiesGroupGroupApiIdGetResponses[keyof ReadGroupPartiesGroupGroupApiIdGetResponses];

export type UpdateGroupPartiesGroupGroupApiIdPatchData = {
    body: GroupUpdate;
    path: {
        group_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}';
};

export type UpdateGroupPartiesGroupGroupApiIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateGroupPartiesGroupGroupApiIdPatchError = UpdateGroupPartiesGroupGroupApiIdPatchErrors[keyof UpdateGroupPartiesGroupGroupApiIdPatchErrors];

export type UpdateGroupPartiesGroupGroupApiIdPatchResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type UpdateGroupPartiesGroupGroupApiIdPatchResponse = UpdateGroupPartiesGroupGroupApiIdPatchResponses[keyof UpdateGroupPartiesGroupGroupApiIdPatchResponses];

export type AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostData = {
    body?: never;
    path: {
        group_api_id: string;
        user_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}:add_member/{user_api_id}';
};

export type AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostError = AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostErrors[keyof AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostErrors];

export type AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponse = AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponses[keyof AddUserToGroupPartiesGroupGroupApiIdAddMemberUserApiIdPostResponses];

export type RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostData = {
    body?: never;
    path: {
        group_api_id: string;
        user_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}:remove_member/{user_api_id}';
};

export type RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostError = RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostErrors[keyof RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostErrors];

export type RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponse = RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponses[keyof RemoveUserFromGroupPartiesGroupGroupApiIdRemoveMemberUserApiIdPostResponses];

export type ScheduleSendPartiesGroupGroupApiIdScheduleSendPostData = {
    body: ScheduleSendParam;
    path: {
        group_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}:schedule_send';
};

export type ScheduleSendPartiesGroupGroupApiIdScheduleSendPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ScheduleSendPartiesGroupGroupApiIdScheduleSendPostError = ScheduleSendPartiesGroupGroupApiIdScheduleSendPostErrors[keyof ScheduleSendPartiesGroupGroupApiIdScheduleSendPostErrors];

export type ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponse = ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponses[keyof ScheduleSendPartiesGroupGroupApiIdScheduleSendPostResponses];

export type AddMembersPartiesGroupGroupApiIdAddMembersPostData = {
    body: AddMembers;
    path: {
        group_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}:add_members';
};

export type AddMembersPartiesGroupGroupApiIdAddMembersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddMembersPartiesGroupGroupApiIdAddMembersPostError = AddMembersPartiesGroupGroupApiIdAddMembersPostErrors[keyof AddMembersPartiesGroupGroupApiIdAddMembersPostErrors];

export type AddMembersPartiesGroupGroupApiIdAddMembersPostResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type AddMembersPartiesGroupGroupApiIdAddMembersPostResponse = AddMembersPartiesGroupGroupApiIdAddMembersPostResponses[keyof AddMembersPartiesGroupGroupApiIdAddMembersPostResponses];

export type ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostData = {
    body: ReplaceDefaultQuestions;
    path: {
        group_api_id: string;
    };
    query?: never;
    url: '/parties/group/{group_api_id}:replace_default_questions';
};

export type ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostError = ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostErrors[keyof ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostErrors];

export type ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponses = {
    /**
     * Successful Response
     */
    200: GroupLinked;
};

export type ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponse = ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponses[keyof ReplaceGroupDefaultQuestionsPartiesGroupGroupApiIdReplaceDefaultQuestionsPostResponses];

export type AddNextLetterLettersLetterPostData = {
    body: LetterCreate;
    path?: never;
    query?: never;
    url: '/letters/letter';
};

export type AddNextLetterLettersLetterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddNextLetterLettersLetterPostError = AddNextLetterLettersLetterPostErrors[keyof AddNextLetterLettersLetterPostErrors];

export type AddNextLetterLettersLetterPostResponses = {
    /**
     * Successful Response
     */
    200: PublicLetter;
};

export type AddNextLetterLettersLetterPostResponse = AddNextLetterLettersLetterPostResponses[keyof AddNextLetterLettersLetterPostResponses];

export type ListLettersLettersLettersGetData = {
    body?: never;
    path?: never;
    query: {
        group_api_id: string;
        skip?: number;
        limit?: number;
    };
    url: '/letters/letters/';
};

export type ListLettersLettersLettersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListLettersLettersLettersGetError = ListLettersLettersLettersGetErrors[keyof ListLettersLettersLettersGetErrors];

export type ListLettersLettersLettersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PublicLetter>;
};

export type ListLettersLettersLettersGetResponse = ListLettersLettersLettersGetResponses[keyof ListLettersLettersLettersGetResponses];

export type ReadLetterLettersLetterLetterApiIdGetData = {
    body?: never;
    path: {
        letter_api_id: string;
    };
    query?: never;
    url: '/letters/letter/{letter_api_id}';
};

export type ReadLetterLettersLetterLetterApiIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadLetterLettersLetterLetterApiIdGetError = ReadLetterLettersLetterLetterApiIdGetErrors[keyof ReadLetterLettersLetterLetterApiIdGetErrors];

export type ReadLetterLettersLetterLetterApiIdGetResponses = {
    /**
     * Successful Response
     */
    200: PublicLetter;
};

export type ReadLetterLettersLetterLetterApiIdGetResponse = ReadLetterLettersLetterLetterApiIdGetResponses[keyof ReadLetterLettersLetterLetterApiIdGetResponses];

export type ListDashboardLettersLettersLettersDashboardGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/letters/letters:dashboard';
};

export type ListDashboardLettersLettersLettersDashboardGetResponses = {
    /**
     * Successful Response
     */
    200: DashboardLetters;
};

export type ListDashboardLettersLettersLettersDashboardGetResponse = ListDashboardLettersLettersLettersDashboardGetResponses[keyof ListDashboardLettersLettersLettersDashboardGetResponses];

export type EditLetterLettersLetterLetterApiIdEditLetterPostData = {
    body: LetterUpdate;
    path: {
        letter_api_id: string;
    };
    query?: never;
    url: '/letters/letter/{letter_api_id}:edit_letter';
};

export type EditLetterLettersLetterLetterApiIdEditLetterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EditLetterLettersLetterLetterApiIdEditLetterPostError = EditLetterLettersLetterLetterApiIdEditLetterPostErrors[keyof EditLetterLettersLetterLetterApiIdEditLetterPostErrors];

export type EditLetterLettersLetterLetterApiIdEditLetterPostResponses = {
    /**
     * Successful Response
     */
    200: PublicLetter;
};

export type EditLetterLettersLetterLetterApiIdEditLetterPostResponse = EditLetterLettersLetterLetterApiIdEditLetterPostResponses[keyof EditLetterLettersLetterLetterApiIdEditLetterPostResponses];

export type AddQuestionLettersLetterLetterApiIdAddQuestionPostData = {
    body: QuestionCreate;
    path: {
        letter_api_id: string;
    };
    query?: never;
    url: '/letters/letter/{letter_api_id}:add_question';
};

export type AddQuestionLettersLetterLetterApiIdAddQuestionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddQuestionLettersLetterLetterApiIdAddQuestionPostError = AddQuestionLettersLetterLetterApiIdAddQuestionPostErrors[keyof AddQuestionLettersLetterLetterApiIdAddQuestionPostErrors];

export type AddQuestionLettersLetterLetterApiIdAddQuestionPostResponses = {
    /**
     * Successful Response
     */
    200: PublicLetter;
};

export type AddQuestionLettersLetterLetterApiIdAddQuestionPostResponse = AddQuestionLettersLetterLetterApiIdAddQuestionPostResponses[keyof AddQuestionLettersLetterLetterApiIdAddQuestionPostResponses];

export type BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchData = {
    body: Array<ResponseUnlinked>;
    path: {
        letter_api_id: string;
    };
    query?: never;
    url: '/letters/letter/{letter_api_id}:bulk_edit_responses';
};

export type BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchError = BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchErrors[keyof BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchErrors];

export type BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchResponses = {
    /**
     * Successful Response
     */
    200: PublicLetter;
};

export type BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchResponse = BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchResponses[keyof BulkEditResponsesLettersLetterLetterApiIdBulkEditResponsesPatchResponses];

export type GetScheduleForGroupScheduleScheduleGroupApiIdGetData = {
    body?: never;
    path: {
        group_api_id: string;
    };
    query?: never;
    url: '/schedule/schedule/{group_api_id}';
};

export type GetScheduleForGroupScheduleScheduleGroupApiIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScheduleForGroupScheduleScheduleGroupApiIdGetError = GetScheduleForGroupScheduleScheduleGroupApiIdGetErrors[keyof GetScheduleForGroupScheduleScheduleGroupApiIdGetErrors];

export type GetScheduleForGroupScheduleScheduleGroupApiIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScheduleLinked;
};

export type GetScheduleForGroupScheduleScheduleGroupApiIdGetResponse = GetScheduleForGroupScheduleScheduleGroupApiIdGetResponses[keyof GetScheduleForGroupScheduleScheduleGroupApiIdGetResponses];

export type UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostData = {
    body: ResponseUpsert;
    path: {
        question_api_id: string;
    };
    query?: never;
    url: '/questions/question/{question_api_id}:upsert_response';
};

export type UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostError = UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostErrors[keyof UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostErrors];

export type UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponses = {
    /**
     * Successful Response
     */
    200: QuestionLinked;
};

export type UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponse = UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponses[keyof UpsertResponseQuestionsQuestionQuestionApiIdUpsertResponsePostResponses];

export type UploadImageQuestionsQuestionQuestionApiIdUploadImagePostData = {
    body: BodyUploadImageQuestionsQuestionQuestionApiIdUploadImagePost;
    path: {
        question_api_id: string;
    };
    query?: never;
    url: '/questions/question/{question_api_id}:upload_image';
};

export type UploadImageQuestionsQuestionQuestionApiIdUploadImagePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadImageQuestionsQuestionQuestionApiIdUploadImagePostError = UploadImageQuestionsQuestionQuestionApiIdUploadImagePostErrors[keyof UploadImageQuestionsQuestionQuestionApiIdUploadImagePostErrors];

export type UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponses = {
    /**
     * Successful Response
     */
    200: QuestionLinked;
};

export type UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponse = UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponses[keyof UploadImageQuestionsQuestionQuestionApiIdUploadImagePostResponses];

export type EditResponseResponsesResponseResponseApiIdEditResponsePostData = {
    body: ResponseCreateBase;
    path: {
        response_api_id: string;
    };
    query?: never;
    url: '/responses/response/{response_api_id}:edit_response';
};

export type EditResponseResponsesResponseResponseApiIdEditResponsePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EditResponseResponsesResponseResponseApiIdEditResponsePostError = EditResponseResponsesResponseResponseApiIdEditResponsePostErrors[keyof EditResponseResponsesResponseResponseApiIdEditResponsePostErrors];

export type EditResponseResponsesResponseResponseApiIdEditResponsePostResponses = {
    /**
     * Successful Response
     */
    200: ResponseLinked;
};

export type EditResponseResponsesResponseResponseApiIdEditResponsePostResponse = EditResponseResponsesResponseResponseApiIdEditResponsePostResponses[keyof EditResponseResponsesResponseResponseApiIdEditResponsePostResponses];

export type UploadImageResponsesResponseResponseApiIdUploadImagePostData = {
    body: BodyUploadImageResponsesResponseResponseApiIdUploadImagePost;
    path: {
        response_api_id: string;
    };
    query?: never;
    url: '/responses/response/{response_api_id}:upload_image';
};

export type UploadImageResponsesResponseResponseApiIdUploadImagePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadImageResponsesResponseResponseApiIdUploadImagePostError = UploadImageResponsesResponseResponseApiIdUploadImagePostErrors[keyof UploadImageResponsesResponseResponseApiIdUploadImagePostErrors];

export type UploadImageResponsesResponseResponseApiIdUploadImagePostResponses = {
    /**
     * Successful Response
     */
    200: ResponseLinked;
};

export type UploadImageResponsesResponseResponseApiIdUploadImagePostResponse = UploadImageResponsesResponseResponseApiIdUploadImagePostResponses[keyof UploadImageResponsesResponseResponseApiIdUploadImagePostResponses];

export type CreateInviteInvitesPostData = {
    body: InviteCreate;
    path?: never;
    query?: never;
    url: '/invites/';
};

export type CreateInviteInvitesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateInviteInvitesPostError = CreateInviteInvitesPostErrors[keyof CreateInviteInvitesPostErrors];

export type CreateInviteInvitesPostResponses = {
    /**
     * Successful Response
     */
    200: InviteLinked;
};

export type CreateInviteInvitesPostResponse = CreateInviteInvitesPostResponses[keyof CreateInviteInvitesPostResponses];

export type ValidateTokenInvitesTokenTokenGetData = {
    body?: never;
    path: {
        token: string;
    };
    query?: never;
    url: '/invites/token/{token}';
};

export type ValidateTokenInvitesTokenTokenGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ValidateTokenInvitesTokenTokenGetError = ValidateTokenInvitesTokenTokenGetErrors[keyof ValidateTokenInvitesTokenTokenGetErrors];

export type ValidateTokenInvitesTokenTokenGetResponses = {
    /**
     * Successful Response
     */
    200: InviteLinked;
};

export type ValidateTokenInvitesTokenTokenGetResponse = ValidateTokenInvitesTokenTokenGetResponses[keyof ValidateTokenInvitesTokenTokenGetResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HelloHelloGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/hello';
};

export type HelloHelloGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};