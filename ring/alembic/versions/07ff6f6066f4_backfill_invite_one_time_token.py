"""backfill invite.one_time_token

Revision ID: 07ff6f6066f4
Revises: c3f66ba34f6f
Create Date: 2024-10-13 22:45:41.586006

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session

from ring.parties.models.invite_model import Invite
from ring.parties.models.one_time_token_model import OneTimeToken


# revision identifiers, used by Alembic.
revision: str = "07ff6f6066f4"
down_revision: Union[str, None] = "c3f66ba34f6f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "invite", sa.Column("one_time_token_id", sa.Integer(), nullable=True)
    )
    op.create_index(
        op.f("ix_invite_one_time_token_id"),
        "invite",
        ["one_time_token_id"],
        unique=True,
    )
    op.create_foreign_key(
        "invite_one_time_token_id_fkey",
        "invite",
        "one_time_token",
        ["one_time_token_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # DO BACKFILL STUFF
    session = Session(bind=op.get_bind())
    invites = session.scalars(sa.select(Invite)).all()
    for invite in invites:
        if invite._deprecated_token is None:
            continue
        ott = OneTimeToken.create(invite._deprecated_token)  # type: ignore
        session.add(ott)
        invite.one_time_token = ott
        invite.one_time_token.ttl = 0
        invite.one_time_token.used = True
    session.commit()
    op.alter_column(
        "invite",
        "one_time_token_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "invite_one_time_token_id_fkey", "invite", type_="foreignkey"
    )
    op.drop_index(op.f("ix_invite_one_time_token_id"), table_name="invite")
    op.drop_column("invite", "one_time_token_id")
    session = Session(bind=op.get_bind())
    otts = session.scalars(sa.select(OneTimeToken)).all()
    for ott in otts:
        session.delete(ott)
    session.commit()
    # ### end Alembic commands ###
